################################################################################
#
# .bashrc --- a customized bashrc for macOS
#
# Author: Arul Selvan
# Source: https://github.com/aselvan/scripts/blob/master/macos/bashrc
# 
# Version History:
#   Jan 4,  2012 --- Original version from UNIX
#   Dec 23, 2024 --- Clean/move all functions to shell scripts in GitHub
# 
################################################################################

# source system rc if present
if [ -f /etc/bashrc ]; then
   . /etc/bashrc
fi

# ---------------------------- environment variables ---------------------------
export PS1='\[\033]0;\u@\h: \w\007\]\u@\H$ '
export EDITOR=vi
export DATA_HOME="$HOME/data"

# brew path --- setup old or new brew path
if [ -d /opt/homebrew ] ; then
  BREW_HOME="/opt/homebrew"
else
  BREW_HOME="/usr/local"
fi
export BREW_PATH="${BREW_HOME}/bin:${BREW_HOME}/sbin:${BREW_HOME}/opt/curl/bin"

# home and github scripts
HOME_SCRIPTS=${HOME}/data/src/scripts
export SCRIPTS_GITHUB="$HOME/src/scripts.github"
SCRIPTS_GITHUB_PATH="$SCRIPTS_GITHUB/tools:$SCRIPTS_GITHUB/macos:$SCRIPTS_GITHUB/security:$SCRIPTS_GITHUB/firewall:$SCRIPTS_GITHUB/andriod"

# GO lang
export GOPATH=$HOME/go-workspace
export GOROOT=/usr/local/opt/go/libexec
RUST_CARGO=$HOME/.cargo/bin

# Finally, "the PATH" --- includes everything from above
export PATH="${BREW_PATH}:${PATH}:/usr/libexec:$SCRIPTS_GITHUB_PATH:${HOME_SCRIPTS}:${RUST_CARGO}:$GOPATH/bin:${GOROOT}/bin:."

# python -- disable the __pychache__ directory when python code runs
export PYTHONDONTWRITEBYTECODE=1

# grab SSL premaster key from browser
#export SSLKEYLOGFILE=/tmp/sslkeylogfile.txt

# ---------------------------- aliases  ----------------------------
alias ll='ls -lth'
alias dir='ls -l'
alias psall='ps -u ${USER} -U 0 -r'
alias gogit='cd $HOME/src/scripts.github'
alias random_word='gshuf -n 1 /usr/share/dict/words| tr -d "\n"; echo $(gshuf -i0-999 -n 1)'
alias nmap_fullscan='sudo nmap -v -p1-65535 -sV -sS -T5 $*'
alias speed-test='${HOME}/src/testmynet-cli/testmynet-cli -I-WANT-TO-GET-BANNED -location tx -size 102400'
alias dobrew='brew update; brew upgrade; brew upgrade --cask --greedy; brew cleanup --prune=0'
alias time_sync='sudo ntpdate pool.ntp.org'
alias dig443='/usr/bin/dig -p443 @resolver1.opendns.com'
alias digall='/usr/bin/dig -p443 +nocmd $1 any +multiline +noall +answer @resolver1.opendns.com'

# IP aliases
# in case curl had issue w/ resolving, the following syntax used to 
# use dig to resolv it first and have curl use it
alias myip='curl -sL -w "\n" --resolve ifconfig.me:443:`dig +short ifconfig.me` https://ifconfig.me/ip'
alias myip2='curl -sL http://selvans.net/main.shtml|grep "Your IP:"|sed -e "s/.*>//g"'
alias myip3='echo `wget -qO- "\n" ifconfig.me/ip`'
alias selvansip='dig +short selvans.net'

# utils
alias srm='rm -P'
alias pp_jason='cat $* |python3 -m json.tool'
alias du_sort='du -xh -d 1 | sort -hr'
alias vscan='sudo ${HOME}/src/scripts.github/security/clamscan.sh -f $*'
alias play='ffplay -hide_banner -nodisp -autoexit $*'
alias fan_speed='sudo powermetrics -i10 -n1 --samplers smc|grep Fan'
alias chrome_ps='sudo ps -ef |grep -i chrome | grep -vi drive|grep -v grep'
alias pihole_check='ssh root@trex pihole -q $*'
alias lastlog='log show --debug --style syslog --last 1m >/tmp/lastlog'
alias boot_log='sudo log show --predicate "processID == 0" --last boot --debug'
alias htop='sudo htop'
alias ntop='nettop -nPx -m tcp -J  bytes_in,bytes_out -t wifi'
alias gvim='mvim'
alias pbp='pbpaste'
alias pbc='pbcopy'
alias pbt='pbpaste|pbcopy'
alias pbz='echo -n "" |pbcopy'
alias updatedb='sudo /usr/libexec/locate.updatedb'
alias remote_color='echo "tell app \"Terminal\" to set current settings of first window to settings set \"rplinux\""|osascript'
alias lc='echo "tell app \"Terminal\" to set current settings of first window to settings set \"Basic\""|osascript'

#  ----------------------------    functions ----------------------------
# ssh completion (incorporates both known_hosts and config)
_complete_ssh_hosts ()
{
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        comp_ssh_hosts=`cat ~/.ssh/known_hosts | \
                        cut -f 1 -d ' ' | \
                        sed -e s/,.*//g | \
                        grep -v ^# | \
                        uniq | \
                        grep -v "\[" ;
                cat ~/.ssh/config | \
                        grep "^Host " | \
                        awk '{print $2}'
                `
        COMPREPLY=( $(compgen -W "${comp_ssh_hosts}" -- $cur))
        return 0
}
complete -F _complete_ssh_hosts ssh
#complete -F _complete_ssh_hosts scp

# use autojump if instaklled
if [ -f ${BREW_HOME}/etc/autojump.sh ]; then
  . ${BREW_HOME}/etc/autojump.sh
fi

boot_log_today() {
  log show --debug --predicate 'process == "kernel"' --start $(date "+%Y-%m-%d")
}

boot_log_all() {
  log show --debug --last boot --predicate 'process == "kernel"'
}

wakeup_mac() {
  ten_sec_from_now=`date -v +10S "+%m/%d/%Y %H:%M:%S"`
  echo "Waking up mac at '$ten_sec_from_now'"
  sudo pmset schedule wake "$ten_sec_from_now"
}
 
pidof() {
  if [ -z $1 ] ; then
    echo "Usage: pidof <appname> [note: appname can be regex]"
    return
  fi
  ps axc|awk "\$5 ~ /$1/ {print \$1;}"
}

launchctl_running() {
  launchctl list | awk '$1 != "-" {print $0;}'
}

# move git tag specified to latest commit i.e. HEAD
git_move_tag() {
  local tag=$1
  if [ -z "$tag" ] ; then
    echo "Usage: git_move_tag <tagname>"
    return
  fi
  git push origin :refs/tags/${tag}
  git tag -fa ${tag} HEAD -m "Moveing ${tag} to latest commit i.e. HEAD"
  git push origin master --tags 
}

# ----------------------- custom entries ----------------------------
# Finally, include any custom local bashrc if present that may include 
# env/alias/functions that may not be suitable for public version of 
# bashrc in github
if [ -f ~/.bashrc.custom ]; then
   . ~/.bashrc.custom
fi
