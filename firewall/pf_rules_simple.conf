#
################################################################################
# pf_rule_simple.conf - Simple PF (packet filter) rules for basic firewall.
#
# This rule set can be used on-demand with pfctl to enable firewall 
# to protect mac while connected on a public network. There is an 
# anchor setup to allow inserting additional sources to allow trusted
# IP/CIDRs on the fly. Also, it can be installed (see install howto below)
# to start on boot. The 'firewall' shell script can be used to start/stop
# the firewall on demand (see firewall script in this directory)
# 
# NOTE: 
#   * From Yosemite OS onwards, ipfw is no logner supported so and we
#     have to use PF (pfctl) to setup firewall.
#   * In Big Sur, on boot the firewall is ignored, to make it work, 
#     You need to run 'sudo firewall stop; sudo firewall start' after booting
#
# See also: firewall, firewall_install.sh 
#
# Author:  Arul Selvan
# Version: Feb 7, 2015
# 
# Version History:
#   Feb 7,  2015 --- original version
#   Nov 28, 2020 --- updated note above for 'Big Sur' weirdness
#   Jul 8,  2023 --- updated docs, included handy 'firewall_install.sh' script
#   Feb 4,  2025 --- block all inbound from block_list
#
################################################################################
#
# How to install the rules to start during OS boot time 
# -----------------------------------------------------
#
# Manual steps: 
#   * copy this file to /etc/pf.anchors/ directory
#   * edit the /etc/pf.conf file and add the lines between start & end (below) 
#     at the end of file 
#
#  ---------------- start  ----------------
#   # custom firewall anchor 
#   # Disclaimer: This is a free utility from selvansoft.com provided "as is" without 
#   # warranty of any kind, express or implied. Use it at your own risk!
#   # Source: https://github.com/aselvan/scripts/tree/master/firewall
#   anchor "com.selvansoft"
#   load anchor "com.selvansoft" from "/etc/pf.anchors/pf_rules_simple.conf"
#  ----------------- end -----------------
#
# Automated: 
#   * just run 'firewall_install.sh' - a handy script in this directory that 
#     does the same as manual steps.
#
# 
# NOTE: Unfortunately, apple wipes custom entries on /etc/pf.conf during every 
# MacOS update so you have to reapply the above change to /etc/pf.conf everytime 
# after any MacOS update! There is a handy script 'firewall_install.sh' which 
# can do this as well.
#
################################################################################
# How to Test/debug:
# -----------------
#
# testing rules: pfctl -vnf pf_rule_simple.conf
# listing rules: pfctl -sr 
# flusing rules: pfctl -F ALL
#
# debugging: we need to setup fake interface and sniff it to read logs.
#   sudo ifconfig pflog0 create
#   sudo tcpdump -lnettti pflog0
################################################################################
#

# -------------------------- variables section --------------------------
# udp for dns(53),dhcp(67,68),time(123) etc
udp_ports = "{ 53, 67, 68, 123 }"

# icmp for echo reply, destination unreachable, echo, time exceeded ...etc
icmp_types= "{ 0, 3, 8, 11 }"

# allowed ports (comma separated) note: airplay(554,3689,5353)
allowed_tcp_ports = "{ 22, 554, 3689 }"
allowed_udp_ports = "{ 554, 5353 }"

# allowed IPs (comma separated)
allowed_ips = "{ 192.168.1.0/24 }"

# empty placeholder table for dynamically adding trusted hosts on the fly
table <dynamic_list> persist

# table for blocked_list
#
# NOTE: I had the apple snitch (i.e. ocsp.apple.com in US/Midwest) falls in 
#   the range of 17.253.3.0/24 to this before. It would prevent apple 
#   services like developer.apple.com fail but who cares? However, as of 
#   Feb 15, 2023, I removed because it takes so much time to start the 
#   MS Office 365 apps for MacOS as they seem to phone home to apple.com 
#   with multiple retries taking too much time to start, and is annoying!
# 
# For now, I just added a huge block of ChinaMobile which is a source for so 
# many compromised nodes to start with ... add more as needed in the future.
#
# 120.192.0.0/10 -- The fucking China Mobile assholes
# 192.168.4.1    -- O.MG cable default AP. Ofcourse attacker could have changed it to something else
#
table <blocked_list> persist { 120.192.0.0/10 192.168.4.1 }

# table for non-routables 
#   placeholder for non-routables (see firewall script to add/delete entries)
table <non_routable_list> persist

# -------------------------------- settings section ----------------------------
# DEBUG:
# urgent -debug messages generated for serious errors
# misc - debug messages generated for various errors
# loud - debug messages generated for common conditions
#set debug loud
set debug urgent

# A TCP RST is returned for blocked TCP packets, an ICMP unreachable is 
# returned for blocked UDP packets, and all other packets are silently dropped
set block-policy return
  
# list interfaces for which packets should not be filtered.
set skip on lo0

# Load fingerprints of known operating systems for 'os' variable used below
set fingerprints "/etc/pf.os"

# Optimize state timeouts for a normal network environment.
set optimization normal

# floating - states can match packets on any interface. As long as the packet 
# matches a state entry and is passing in the same direction as it was on 
# the interface when the state was created, it does not matter what interface 
# it's crossing, it will pass
set state-policy floating

# DENY rouge redirection
no rdr

# ---------------------------- start of our rules ----------------------------
# block and log everything by default
block log all

# we dont want to talk to winblows of any kind :) note: list of os from "sudo pfctl -so"
#block in log quick proto tcp from any os "Windows"

# NOTE: First, before we allow all outgoing, block what we need from blocked_list table
#block out quick log to <blocked_list>
block out quick to <blocked_list>

# once the traffic is permitted on an interface, let it go 'out'.
pass out quick

# allow the necessary udp ports we need
pass in proto udp to any port $udp_ports
 
# allow ICMP traffic
pass in inet proto icmp to any icmp-type $icmp_types

# allow hosts that we trust for tcp and udp list of ports
pass in proto tcp from $allowed_ips to any port $allowed_tcp_ports
pass in proto udp from $allowed_ips to any port $allowed_udp_ports

# allow dynamic ips we can add on the fly
pass in proto tcp from <dynamic_list> to any port $allowed_tcp_ports
pass in proto udp from <dynamic_list> to any port $allowed_udp_ports

# finally, block all inbounds from blocked list
#block in quick log from { <blocked_list>, <non_routable_list> }
block in quick from { <blocked_list>, <non_routable_list> }
